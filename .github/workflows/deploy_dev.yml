name: Build and Deploy to Docker Hub

on:
  push:
    branches:
      - develop
      - CI-workflow
  pull_request:
    branches:
      - develop
      - CI-workflow
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'develop'

jobs:
  lint:
    name: Run Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["frontend", "activity-tracking", "analytics", "recipes"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Service Variables
        run: |
          case "${{ matrix.service }}" in
            frontend)
              echo "language=node" >> $GITHUB_ENV
              echo "working_directory=frontend" >> $GITHUB_ENV
              ;;
            activity-tracking)
              echo "language=node" >> $GITHUB_ENV
              echo "working_directory=activity-tracking" >> $GITHUB_ENV
              ;;
            analytics)
              echo "language=python" >> $GITHUB_ENV
              echo "working_directory=analytics" >> $GITHUB_ENV
              ;;
            recipes)
              echo "language=python" >> $GITHUB_ENV
              echo "working_directory=recipes" >> $GITHUB_ENV
              ;;
          esac

      - name: Set up Python
        if: ${{ env.language == 'python' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Cache Dependencies
        if: ${{ env.language == 'node' }}
        uses: actions/cache@v3
        with:
          path: ${{ env.working_directory }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/package-lock.json', env.working_directory)) }}
      
      - name: Cache Poetry
        if: ${{ env.language == 'python' }}
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles(format('{0}/poetry.lock', env.working_directory)) }}
      
      - name: Set up Language Environment and Run Lint
        run: |
          cd ${{ github.workspace }}/${{ env.working_directory }}
          case "${{ env.language }}" in
            node)
              echo "Setting up Node.js environment..."
              npm install
              npm run lint
              ;;
            python)
              echo "Setting up Python environment..."
              poetry install
              flake8 .
              ;;
          esac

  unit_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["frontend", "activity-tracking", "analytics", "recipes"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Service Variables
        run: |
          case "${{ matrix.service }}" in
            frontend)
              echo "language=node" >> $GITHUB_ENV
              echo "working_directory=frontend" >> $GITHUB_ENV
              ;;
            activity-tracking)
              echo "language=node" >> $GITHUB_ENV
              echo "working_directory=activity-tracking" >> $GITHUB_ENV
              ;;
            analytics)
              echo "language=python" >> $GITHUB_ENV
              echo "working_directory=analytics" >> $GITHUB_ENV
              ;;
            recipes)
              echo "language=python" >> $GITHUB_ENV
              echo "working_directory=recipes" >> $GITHUB_ENV
              ;;
          esac

          
      - name: Set up Python
        if: ${{ env.language == 'python' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Cache Dependencies
        if: ${{ env.language == 'node' }}
        uses: actions/cache@v3
        with:
          path: ${{ env.working_directory }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/package-lock.json', env.working_directory)) }}
      
      - name: Cache Poetry
        if: ${{ env.language == 'python' }}
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles(format('{0}/poetry.lock', env.working_directory)) }}
      
      - name: Set up Language Environment and Run Tests
        run: |
          cd ${{ github.workspace }}/${{ env.working_directory }}
          case "${{ env.language }}" in
            node)
              echo "Setting up Node.js environment and running tests..."
              npm install
              npm test
              ;;
            python)
              echo "Setting up Python environment and running tests..."
              poetry install
              poetry run pytest
              ;;
          esac

  build_and_deploy:
    name: Build and Deploy to Docker Hub
    needs:
      - lint
      - unit_tests
    runs-on: ubuntu-latest
    env:
      NODE_ENV: ${{ secrets.NODE_ENV_DEV }}
      MONGO_DB: ${{ secrets.MONGO_DB_DEV }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      SPRING_DATA_MONGODB_DATABASE: ${{ secrets.SPRING_DATA_MONGODB_DATABASE_DEV }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
      MONGO_DB_AUTH_DATABASE: authservice-dev
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images for All Services
        run: |
          SERVICES=("frontend" "activity-tracking" "authservice" "analytics" "recipes")
          for service in "${SERVICES[@]}"; do
            echo "Building and pushing Docker image for $service"
            docker build --cache-from $DOCKER_USERNAME/$service:latest -t $DOCKER_USERNAME/$service:latest -f ./$service/Dockerfile ./$service || exit 1
            docker push $DOCKER_USERNAME/$service:latest || exit 1
          done
