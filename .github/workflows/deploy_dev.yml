# ––––––––––––––––––––––––––––––––
# This workflow builds and pushes Docker images to Docker Hub.
# It runs automatically when there is a push to the develop branch.
# Docker images are built and pushed only for services that have changes in their directories.
# It also checks commit messages for the service's name to determine if the service needs rebuilding.
# Ensure that DOCKER_USERNAME and DOCKER_PASSWORD are added to GitHub secrets for authentication.
# ––––––––––––––––––––––––––––––––
name: Test Deploy to Docker Hub

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'develop'

jobs:
  determine_changes:
    name: Determine Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set_services.outputs.services }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Changed Services
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'frontend/**'
            activity-tracking:
              - 'activity-tracking/**'
            authservice:
              - 'authservice/**'
            analytics:
              - 'analytics/**'
            recipes:
              - 'recipes/**'

      - name: Set Services Output
        id: set_services
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.services }}" ]; then
            # Convert comma-separated services into a JSON array
            SERVICES=$(echo "[\"$(echo ${{ github.event.inputs.services }} | tr ',' '","')\"]")
          else
            # Use paths-filter to determine changed services and convert to JSON array
            SERVICES=$(echo "${{ steps.filter.outputs }}" | jq -r 'to_entries | map(select(.value == "true") | .key) | @json')
          fi
          echo "services=${SERVICES}" >> $GITHUB_OUTPUT
            
            
      
      - name: Debug Services Output
        run: |
          echo "Changed services: ${{ steps.set_services.outputs.services }}"
 
  lint_and_test:
    name: Lint and Test Services
    runs-on: ubuntu-latest
    needs: determine_changes
    # Runs only if there are changed services
    if: needs.determine_changes.outputs.services != '[]' 
    strategy: 
      matrix:
        service: 
          ${{ fromJson(needs.determine_changes.outputs.services) }} ## gets and saves the services that have changes in matrix.strategy
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.18.0'
      
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            !**/node_modules/.cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        ## it will only run the step if the service has changes
        if: matrix.service != '' 
        run: |
          cd ${{ matrix.service }}
          npm install --legacy-peer-deps

      - name: Run Lint
        if: matrix.service != ''
        run: |
          cd ${{ matrix.service }}
          npm run lint

      - name: Run Unit Tests
        if: matrix.service != ''
        run: |
          cd ${{ matrix.service }}
          npm test

  # lint_and_test_frontend:
  #   name: Lint and Test Frontend
  #   runs-on: ubuntu-latest
  #   if: contains(needs.determine_changes.outputs.services, 'frontend')
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18.18.0' # Ensure compatibility with ESLint and Jest

  #     - name: Install Dependencies
  #       run: |
  #         cd frontend
  #         npm install

  #     - name: Run Lint
  #       run: |
  #         cd frontend
  #         npm run lint

  #     - name: Run Unit Tests
  #       run: |
  #         cd frontend
  #         npm test

  # lint_and_test_activity_tracking:
  #   name: Lint and Test Activity Tracking
  #   runs-on: ubuntu-latest
  #   if: contains(needs.determine_changes.outputs.services, 'activity-tracking')
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18.18.0' # Ensure compatibility with ESLint and Jest

  #     - name: Install Dependencies
  #       run: |
  #         cd activity-tracking
  #         npm install --legacy-peer-deps # Use legacy peer deps to avoid conflicts

  #     - name: Run Lint
  #       run: |
  #         cd activity-tracking
  #         npm run lint

  #     - name: Run Unit Tests
  #       run: |
  #         cd activity-tracking
  #         npm test
  # lint_authservice:
  #   name: Lint AuthService
  #   uses: ./.github/workflows/lint.yml
  #   with:
  #     service: authservice
  #     language: java
  #     working_directory: authservice

  # lint_analytics:
  #   name: Lint Analytics
  #   uses: ./.github/workflows/lint.yml
  #   with:
  #     service: analytics
  #     language: python
  #     working_directory: analytics

  # lint_recipes:
  #   name: Lint Recipes
  #   uses: ./.github/workflows/lint.yml
  #   with:
  #     service: recipes
  #     language: python
  #     working_directory: recipes
  
  build_and_deploy:
    name: Build and Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs:
    - determine_changes
    - lint_and_test
    if: needs.determine_changes.outputs.services != '[]'
    strategy:
      matrix:
        service: 
          ${{ fromJson(needs.determine_changes.outputs.services) }}
    env:
      NODE_ENV: ${{ secrets.NODE_ENV_DEV }}
      MONGO_DB: ${{ secrets.MONGO_DB_DEV }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      SPRING_DATA_MONGODB_DATABASE: ${{ secrets.SPRING_DATA_MONGODB_DATABASE_DEV }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      REACT_APP_API_URL: http://localhost:8080
      MONGO_DB_AUTH_DATABASE: authservice-dev

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      
      
      - name: Verify Docker Compose Version
        run: |
          docker-compose --version
          # Ensure it's compatible with version '3.8'
          COMPOSE_VERSION=$(docker-compose version --short)
          echo "Docker Compose version: $COMPOSE_VERSION"
          # Optionally, enforce a specific version
          # if [[ "$COMPOSE_VERSION" != "1.29.2" ]]; then
          #   echo "Incompatible Docker Compose version."
          #   exit 1
          # fi

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker-compose.yml', 'docker-compose.develop.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
    
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the image locally within GitHub Action runner
      # without pushing it to Docker Hub
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest

      - name: Scan Docker image with Trivy for vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
          format: 'table' # output format for the scan results
          exit-code: '1' # the job will faild on high or critical vulnerabilities
          ignore-unfixed: true # Ignore unpatched/unfixed vulnerabilities
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # TODO: Upload Trivy scan results to GitHub Security tab
      
      # Push Docker Image only if build and scan were successful
      - name: Push Docker image
        if: success()
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest

      # TODO: add slack notifications for deployment status: success or failure