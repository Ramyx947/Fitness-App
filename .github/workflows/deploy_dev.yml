# ––––––––––––––––––––––––––––––––
# This workflow builds and pushes Docker images to Docker Hub.
# It runs automatically when there is a push to the develop branch.
# Docker images are built and pushed only for services that have changes in their directories.
# It also checks commit messages for the service's name to determine if the service needs rebuilding.
# Ensure that DOCKER_USERNAME and DOCKER_PASSWORD are added to GitHub secrets for authentication.
# ––––––––––––––––––––––––––––––––
name: Test Deploy to Docker Hub

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'develop'
      services: # Optional: Allow manual input of services
        description: 'Comma-separated list of services to build and deploy'
        required: false


jobs:
  # determine_changes:
  #   name: Determine Changed Services
  #   runs-on: ubuntu-latest
  #   outputs:
  #     services: ${{ steps.set_services.outputs.services }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Determine Changed Services
  #       id: filter
  #       uses: dorny/paths-filter@v2
  #       with:
  #         filters: |
  #           frontend:
  #             - 'frontend/**'
  #           activity-tracking:
  #             - 'activity-tracking/**'
  #           authservice:
  #             - 'authservice/**'
  #           analytics:
  #             - 'analytics/**'
  #           recipes:
  #             - 'recipes/**'

  #     - name: Set Services Output
  #       id: set_services
  #       run: |
  #         SERVICES=$(echo "${{ steps.filter.outputs }}" | jq -r '[keys[] | select(. != "default")] | @json')
  #         if [ -z "$SERVICES" ]; then
  #           SERVICES='[]'
  #         fi
  #         echo "services=${SERVICES}" >> $GITHUB_OUTPUT
            
      
  #     - name: Debug Services Output
  #       run: |
  #         echo "Changed services: ${{ steps.set_services.outputs.services }}"
  #         echo "Services array:"
  #         echo "${{ steps.set_services.outputs.services }}"
        
  #     - name: Validate Services JSON
  #       run: |
  #         echo "${{ steps.set_services.outputs.services }}" | jq empty
  #         echo "Services JSON is valid."
            
            
            
      
  #     - name: Debug Services Output
  #       run: |
  #         echo "Changed services: ${{ steps.set_services.outputs.services }}"


  lint_and_test_frontend:
    name: Lint and Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.18.0' # Ensure compatibility with ESLint and Jest

      - name: Install Dependencies
        run: |
          cd frontend
          npm install

      - name: Run Lint
        run: |
          cd frontend
          npm run lint

      - name: Run Unit Tests
        run: |
          cd frontend
          npm test

  lint_and_test_activity_tracking:
    name: Lint and Test Activity Tracking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.18.0' # Ensure compatibility with ESLint and Jest

      - name: Install Dependencies
        run: |
          cd activity-tracking
          npm install --legacy-peer-deps # Use legacy peer deps to avoid conflicts

      - name: Run Lint
        run: |
          cd activity-tracking
          npm run lint

      - name: Run Unit Tests
        run: |
          cd activity-tracking
          npm test
  # lint_authservice:
  #   name: Lint AuthService
  #   uses: ./.github/workflows/lint.yml
  #   with:
  #     service: authservice
  #     language: java
  #     working_directory: authservice

  # lint_analytics:
  #   name: Lint Analytics
  #   uses: ./.github/workflows/lint.yml
  #   with:
  #     service: analytics
  #     language: python
  #     working_directory: analytics

  lint_recipes:
    name: Lint Recipes
    uses: ./.github/workflows/lint.yml
    with:
      service: recipes
      language: python
      working_directory: recipes
  
  build_and_deploy:
    name: Build and Deploy to Docker Hub
    runs-on: ubuntu-latest
    env:
      NODE_ENV: ${{ secrets.NODE_ENV_DEV }}
      MONGO_DB: ${{ secrets.MONGO_DB_DEV }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      SPRING_DATA_MONGODB_DATABASE: ${{ secrets.SPRING_DATA_MONGODB_DATABASE_DEV }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      REACT_APP_API_URL: http://localhost:8080
      MONGO_DB_AUTH_DATABASE: authservice-dev

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      
      - name: Verify Docker Compose Version
        run: |
          docker-compose --version
          COMPOSE_VERSION=$(docker-compose version --short)
          echo "Docker Compose version: $COMPOSE_VERSION"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker-compose.yml', 'docker-compose.develop.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
    
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker images for all services
      - name: Build and Push Docker Images for All Services
        env:
          SERVICES: "frontend activity-tracking"
        run: |
          for service in $SERVICES; do
            echo "Building and pushing Docker image for $service"
            
            # Build the Docker image
            docker build -t $DOCKER_USERNAME/$service:latest -f ./$service/Dockerfile ./$service
            
            # Build and push the Docker image
            docker buildx build --push -t $DOCKER_USERNAME/$service:latest -f ./$service/Dockerfile ./$service
          done
