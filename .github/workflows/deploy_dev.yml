# ––––––––––––––––––––––––––––––––
# This workflow builds and pushes Docker images to Docker Hub.
# It runs automatically when there is a push to the develop branch.
# Docker images are built and pushed only for services that have changes in their directories.
# It also checks commit messages for the service's name to determine if the service needs rebuilding.
# Ensure that DOCKER_USERNAME and DOCKER_PASSWORD are added to GitHub secrets for authentication.
# ––––––––––––––––––––––––––––––––
name: Test Deploy to Docker Hub

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'develop'
      services: # Optional: Allow manual input of services
        description: 'Comma-separated list of services to build and deploy'
        required: false


jobs:
  determine_changes:
    name: Determine Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set_services.outputs.services }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Changed Services
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'frontend/**'
            activity-tracking:
              - 'activity-tracking/**'
            authservice:
              - 'authservice/**'
            analytics:
              - 'analytics/**'
            recipes:
              - 'recipes/**'

      - name: Set Services Output
        id: set_services
        run: |
          SERVICES=$(echo "${{ steps.filter.outputs }}" | jq -r '[keys[] | select(. != "default")] | @json')
          echo "services=${SERVICES}" >> $GITHUB_OUTPUT


  lint:
    name: Run Linting
    needs: determine_changes
    if: needs.determine_changes.outputs.services != '[]'
    uses: ./.github/workflows/lint.yml
    with:
      services: ${{ needs.determine_changes.outputs.services }}

  unit_tests:
    name: Run Unit Tests
    needs: determine_changes
    if: needs.determine_changes.outputs.services != '[]'
    uses: ./.github/workflows/unit-tests.yml
    with:
      services: ${{ needs.determine_changes.outputs.services }}
  
  build_and_deploy:
    name: Build and Deploy to Docker Hub
    runs-on: ubuntu-latest
    env:
      NODE_ENV: ${{ secrets.NODE_ENV_DEV }}
      MONGO_DB: ${{ secrets.MONGO_DB_DEV }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      SPRING_DATA_MONGODB_DATABASE: ${{ secrets.SPRING_DATA_MONGODB_DATABASE_DEV }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      REACT_APP_API_URL: http://localhost:8080
      MONGO_DB_AUTH_DATABASE: authservice-dev

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      
      - name: Verify Docker Compose Version
        run: |
          docker-compose --version
          COMPOSE_VERSION=$(docker-compose version --short)
          echo "Docker Compose version: $COMPOSE_VERSION"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker-compose.yml', 'docker-compose.develop.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
    
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker images for all services
      - name: Build and Push Docker Images for All Services
        env:
          SERVICES: "frontend activity-tracking"
        run: |
          for service in $SERVICES; do
            echo "Building and pushing Docker image for $service"
            
            # Build the Docker image
            docker build -t $DOCKER_USERNAME/$service:latest -f ./$service/Dockerfile ./$service
            
            # Build and push the Docker image
            docker buildx build --push -t $DOCKER_USERNAME/$service:latest -f ./$service/Dockerfile ./$service
          done
