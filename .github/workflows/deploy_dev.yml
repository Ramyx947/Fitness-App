# ––––––––––––––––––––––––––––––––
# This workflow builds and pushes Docker images to Docker Hub.
# It runs automatically when there is a push to the develop branch.
# Docker images are built and pushed only for services that have changes in their directories.
# It also checks commit messages for the service's name to determine if the service needs rebuilding.
# Ensure that DOCKER_USERNAME and DOCKER_PASSWORD are added to GitHub secrets for authentication.
# ––––––––––––––––––––––––––––––––
name: Build and Deploy to Docker Hub

on:
  push:
    branches:
      - develop
      - CI-workflow
  pull_request:
    branches:
      - develop
      - CI-workflow
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'develop'
      services:
        description: 'Comma-separated list of services to build and deploy'
        required: false
      run_lint:
        description: 'Run Lint Job (true/false)'
        required: false
        default: 'true'
      run_unit_tests:
        description: 'Run Unit Tests Job (true/false)'
        required: false
        default: 'true'
      run_build_and_deploy:
        description: 'Run Build and Deploy Job (true/false)'
        required: false
        default: 'true'

jobs:
  determine_changes:
    name: Determine Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set_services.outputs.services }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      ## Debugging & logging
      # - name: List Remote Branches
      #   run: |
      #     git branch -r

      # - name: Fetch develop branch
      #   run: |
      #     git fetch origin develop:develop

      # - name: Show Merge Base
      #   run: git merge-base origin/develop HEAD
      
      # - name: Fetch all branches
      #   run: |
      #     git fetch --all
      #     git branch -r

      # - name: List All Changed Files
      #   run: git diff --name-status origin/develop...HEAD

      # - name: Print Path Filter Output
      #   run: |
      #     echo "Path Filter Results:"
      #     echo "Frontend changed: ${{ steps.filter.outputs.frontend }}"
      #     echo "Activity-tracking changed: ${{ steps.filter.outputs.activity-tracking }}"
      #     echo "Activity-tracking changed files: ${{ steps.filter.outputs.activity-tracking_files }}"
      #     echo "Authservice changed: ${{ steps.filter.outputs.authservice }}"
      #     echo "Analytics changed: ${{ steps.filter.outputs.analytics }}"
      #     echo "Recipes changed: ${{ steps.filter.outputs.recipes }}"

      # - name: Check Git Status
      #   run: |
      #     git status
      #     git ls-files -m

      # - name: Determine Base Branch
      #   id: determine_base
      #   run: |
      #     # Check if 'develop' exists locally; if not, use 'origin/develop'
      #     if git show-ref --verify --quiet refs/heads/develop; then
      #       echo "base_branch=develop" >> $GITHUB_ENV
      #     else
      #       echo "base_branch=origin/develop" >> $GITHUB_ENV
      #     fi
      #   shell: bash


      - name: Determine Changed Directories
        id: determine_changes
        run: |
          FILES=$(git diff --name-only origin/develop...HEAD)
          SERVICES="[]"
          if echo "$FILES" | grep -q '^frontend/'; then
            SERVICES=$(echo "$SERVICES" | jq '. + ["frontend"]')
          fi
          if echo "$FILES" | grep -q '^activity-tracking/'; then
            SERVICES=$(echo "$SERVICES" | jq '. + ["activity-tracking"]')
          fi
          if echo "$FILES" | grep -q '^authservice/'; then
            SERVICES=$(echo "$SERVICES" | jq '. + ["authservice"]')
          fi
          if echo "$FILES" | grep -q '^analytics/'; then
            SERVICES=$(echo "$SERVICES" | jq '. + ["analytics"]')
          fi
          if echo "$FILES" | grep -q '^recipes/'; then
            SERVICES=$(echo "$SERVICES" | jq '. + ["recipes"]')
          fi
          echo "services=$SERVICES" >> $GITHUB_ENV
          echo "services<<EOF" >> $GITHUB_OUTPUT
          echo "$SERVICES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # - name: Print Paths Filter Outputs
      #   run: |
      #     echo "Frontend files changed: ${{ steps.filter.outputs.frontend_files }}"
      #     echo "Activity-tracking files changed: ${{ steps.filter.outputs.activity-tracking_files }}"
      #     echo "Authservice files changed: ${{ steps.filter.outputs.authservice_files }}"
      #     echo "Analytics files changed: ${{ steps.filter.outputs.analytics_files }}"
      #     echo "Recipes files changed: ${{ steps.filter.outputs.recipes_files }}"
      # - name: Set Services Output
      #   id: set_services
      #   run: |
      #     set -e
      #     # Start with an empty array
      #     SERVICES_JSON="[]"
      #     if [ "${{ steps.filter.outputs.frontend }}" == "true" ]; then
      #       SERVICES_JSON=$(echo "$SERVICES_JSON" | jq '. + ["frontend"]')
      #     fi
      #     if [ "${{ steps.filter.outputs.activity-tracking }}" == "true" ]; then
      #       SERVICES_JSON=$(echo "$SERVICES_JSON" | jq '. + ["activity-tracking"]')
      #     fi
      #     if [ "${{ steps.filter.outputs.authservice }}" == "true" ]; then
      #       SERVICES_JSON=$(echo "$SERVICES_JSON" | jq '. + ["authservice"]')
      #     fi
      #     if [ "${{ steps.filter.outputs.analytics }}" == "true" ]; then
      #       SERVICES_JSON=$(echo "$SERVICES_JSON" | jq '. + ["analytics"]')
      #     fi
      #     if [ "${{ steps.filter.outputs.recipes }}" == "true" ]; then
      #       SERVICES_JSON=$(echo "$SERVICES_JSON" | jq '. + ["recipes"]')
      #     fi

      #     if [ -z "$SERVICES_JSON" ] || [ "$SERVICES_JSON" == '[]' ]; then
      #       echo "No services determined for deployment."
      #       exit 1
      #     fi
          
      #     echo "services<<EOF" >> $GITHUB_OUTPUT
      #     echo "$SERVICES_JSON" >> $GITHUB_OUTPUT
      #     echo "EOF" >> $GITHUB_OUTPUT

      # ## Debugging & logging
      # - name: Debug Services Output
      #   run: |
      #     echo "Changed services: ${{ steps.set_services.outputs.services }}"
      #     echo "Activity-Tracking Files: ${{ steps.filter.outputs.activity_tracking_files }}"
      #     echo "Frontend Files: ${{ steps.filter.outputs.frontend_files }}"

  lint:
    name: Run Linting
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.services != '[]' && (github.event_name != 'workflow_dispatch' || github.event.inputs.run_lint == 'true') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.determine_changes.outputs.services) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Service Variables
        run: |
          case "${{ matrix.service }}" in
            frontend)
              echo "language=node" >> $GITHUB_ENV
              echo "working_directory=frontend" >> $GITHUB_ENV
              ;;
            activity-tracking)
              echo "language=node" >> $GITHUB_ENV
              echo "working_directory=activity-tracking" >> $GITHUB_ENV
              ;;
            analytics)
              echo "language=python" >> $GITHUB_ENV
              echo "working_directory=analytics" >> $GITHUB_ENV
              ;;
            recipes)
              echo "language=python" >> $GITHUB_ENV
              echo "working_directory=recipes" >> $GITHUB_ENV
              ;;
            authservice)
              echo "language=java" >> $GITHUB_ENV
              echo "working_directory=authservice" >> $GITHUB_ENV
              ;;
            *)
              echo "Unsupported service: $SERVICE"
              exit 1
              ;;
          esac

      # Set up language environments
      - name: Set up Node.js
        if: ${{ env.language == 'node' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ env.working_directory }}/package-lock.json

      - name: Set up Python
        if: ${{ env.language == 'python' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pip'
          cache-dependency-path: ${{ env.working_directory }}/requirements.txt

      - name: Set up Java
        if: ${{ env.language == 'java' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      
      - name: Cache Gradle Dependencies
        if: ${{ env.language == 'java' }}
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles(format('{0}/**/*.gradle*', env.working_directory)) }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Lint
        uses: ./.github/actions/lint
        with:
          service: ${{ matrix.service }}
          language: ${{ env.language }}
          working_directory: ${{ env.working_directory }}

  unit_tests:
    name: Run Unit Tests
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.services != '[]' && (github.event_name != 'workflow_dispatch' || github.event.inputs.run_unit_tests == 'true') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.determine_changes.outputs.services) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Service Variables
        run: |
          set -e
          SERVICE=$(echo "${{ matrix.service }}" | tr '[:upper:]' '[:lower:]')
          case "$SERVICE" in
            frontend)
              echo "language=node" >> $GITHUB_ENV
              echo "working_directory=frontend" >> $GITHUB_ENV
              ;;
            activity-tracking)
              echo "language=node" >> $GITHUB_ENV
              echo "working_directory=activity-tracking" >> $GITHUB_ENV
              ;;
            analytics)
              echo "language=python" >> $GITHUB_ENV
              echo "working_directory=analytics" >> $GITHUB_ENV
              ;;
            recipes)
              echo "language=python" >> $GITHUB_ENV
              echo "working_directory=recipes" >> $GITHUB_ENV
              ;;
            authservice)
              echo "language=java" >> $GITHUB_ENV
              echo "working_directory=authservice" >> $GITHUB_ENV
              ;;
            *)
              echo "Unsupported service: $SERVICE"
              exit 1
              ;;
          esac

      # Set up language environments
      # - name: Set up Node.js
      #   if: ${{ env.language == 'node' }}
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'
      #     cache: 'npm'
      #     cache-dependency-path: ${{ env.working_directory }}/package-lock.json

      # - name: Set up Python
      #   if: ${{ env.language == 'python' }}
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.x'
      #     cache: 'pip'
      #     cache-dependency-path: ${{ env.working_directory }}/requirements.txt

      # - name: Set up Java
      #   if: ${{ env.language == 'java' }}
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'temurin'
      #     java-version: '11'
      
      # - name: Cache Gradle Dependencies
      #   if: ${{ env.language == 'java' }}
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.gradle/caches
      #     key: ${{ runner.os }}-gradle-${{ hashFiles(format('{0}/**/*.gradle*', env.working_directory)) }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-

      # - name: Run Unit Tests
      #   uses: ./.github/actions/unit-tests
      #   with:
      #     service: ${{ matrix.service }}
      #     language: ${{ env.language }}
      #     working_directory: ${{ env.working_directory }}
  
  # deploy:
  #   name: Deploy Changed Services
  #   needs: determine_changes
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       service: ${{ fromJson(needs.determine_changes.outputs.files) }}
  #     fail-fast: false

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Deploy Service
  #       env:
  #         FILE: ${{ matrix.service }}
  #       run: |
  #         echo "Deploying service for changed file: $FILE"

  build_and_deploy:
    name: Build and Deploy to Docker Hub
    needs:
      - lint
      - unit_tests
    if: ${{ needs.determine_changes.outputs.services != '[]' && (github.event_name != 'workflow_dispatch' || github.event.inputs.run_build_and_deploy == 'true') }}
    runs-on: ubuntu-latest
    env:
      NODE_ENV: ${{ secrets.NODE_ENV_DEV }}
      MONGO_DB: ${{ secrets.MONGO_DB_DEV }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      SPRING_DATA_MONGODB_DATABASE: ${{ secrets.SPRING_DATA_MONGODB_DATABASE_DEV }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
      MONGO_DB_AUTH_DATABASE: authservice-dev
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images for Changed Services
        env:
          SERVICES: ${{ needs.determine_changes.outputs.services }}
        run: |
          SERVICES=$(echo $SERVICES | jq -r '.[]')
          for service in $SERVICES; do
            echo "Building and pushing Docker image for $service"
            docker build -t $DOCKER_USERNAME/$service:latest -f ./$service/Dockerfile ./$service || exit 1
            docker push $DOCKER_USERNAME/$service:latest || exit 1
          done

  #     # Optional: Scan Docker images for vulnerabilities
  #     # - name: Scan Docker Image for Vulnerabilities
  #     #   run: |
  #     #     for service in $SERVICES; do
  #     #       docker scan $DOCKER_USERNAME/$service:latest || true
  #     #     done
